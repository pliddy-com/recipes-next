name: Scan and Build Branch
run-name: Scan and Build Branch

on:
  push:
  workflow_dispatch:
  # # Allows external webhook trigger with "event_type" = "publish-event"
  # repository_dispatch:
  #   types: [publish-event]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_FILE: '.nvmrc'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: Node Cache
        id: node-cache
        uses: actions/cache@v3
        env:
          cache-name: node-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
      - name: Lint
        run: npm run lint
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: Node Cache
        id: node-cache
        uses: actions/cache@v3
        env:
          cache-name: node-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
  test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: Node Cache
        id: node-cache
        uses: actions/cache@v3
        env:
          cache-name: node-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
      - name: Run Unit Tests
        run: npm run test
  buildAndDeploySite:
    name: Build and Deploy Site
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: Node Cache
        id: node-cache
        uses: actions/cache@v3
        env:
          cache-name: node-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Nextjs Build Cache
        id: build-cache
        env:
          cache-name: build-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/node_modules
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
      - name: Get Bucket Name
        id: bucket-name
        uses: actions/github-script@v6
        env:
          S3_BUCKET_BASE: ${{ vars.S3_BUCKET_BASE }}
        with:
          result-encoding: string
          script: |
            const { S3_BUCKET_BASE } = process.env

            console.log('S3_BUCKET_BASE:', S3_BUCKET_BASE);

            const { ref } = context;
            const refArray = ref.split('/');
            const branch = refArray[refArray.length - 1];

            console.log('branch:', branch);

            const bucketName = `${ S3_BUCKET_BASE }-${ branch === 'main' ? 'prod' : 'dev' }`

            console.log('bucketName:', bucketName);

            return bucketName;
      - name: Build and Deploy
        id: build-and-deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BRANCH: ${{ github.ref_name }}
          NEXT_PUBLIC_API_ENDPOINT: https://graphql.contentful.com/content/v1/spaces/${{secrets.CONTENTFUL_SPACE_ID}}/
          NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
          NEXT_PUBLIC_CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          S3_BUCKET: ${{ steps.bucket-name.outputs.result }}
        run: |
          echo "branch: $BRANCH"
          echo "deployment bucket: $S3_BUCKET"

          npm run deploy
  deployStack:
    # set conditional so it does not deploy stack when triggered by webhook
    # webhook should re-build Next app with new content; doesn't need IAC
    name: Deploy Stack
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, buildAndDeploySite]
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: CDK Cache
        id: cdk-cache
        uses: actions/cache@v3
        env:
          cache-name: cdk-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
      - name: Deploy Branch-specific Stack for ${{github.ref}}
        working-directory: .github/cdk/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: npm run deploy
