name: Deploy Branch AWS Resources
run-name: Deploy Branch AWS Resources

on:
  push:
  # create:
  #   branches:
  #     - '!main'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_FILE: '.nvmrc'

jobs:
  deployStack:
    # if: github.event.ref_type == 'branch'
    name: Deploy Stack
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Use Node.js version in .nvmrc
        uses: actions/setup-node@v3
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache: 'npm'
      - name: CDK Cache
        id: cdk-cache
        uses: actions/cache@v3
        env:
          cache-name: cdk-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ github.repository }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ github.repository }}-${{ env.cache-name }}-
            ${{ github.repository }}-
      - name: Install Dependencies
        working-directory: .github/cdk/
        run: npm ci --ignore-scripts
      - name: Deploy Branch-specific Stack for ${{github.event.ref}}
        working-directory: .github/cdk/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: npm run deploy
      - name: Get CDK Outputs
        working-directory: .github/cdk/
        id: cdk-outputs
        # handle multi-line json
        run: |
          content=`cat ./cdk-outputs.json`
          content="${content//$'\n'/''}"
          content="${content//$'\r'/''}"
          content="${content//$'\s+'/''}"

          echo "CDK_OUTPUTS: ${content}"
          echo "CDK_OUTPUTS=$content" >> $GITHUB_ENV
      - name: Get Distribution Id
        id: distribution-id
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { CDK_OUTPUTS } = process.env;
            const { ref } = context;

            const cdkOutputs = JSON.parse(CDK_OUTPUTS);
            const refArray = ref.split('/');
            const branch = refArray[refArray.length - 1];
            const branchLabel = branch && branch[0].toUpperCase() + branch.slice(1);
            const stackLabel = `RecipesBranchStack${ branchLabel }`
            const branchSlug = branchLabel.replaceAll('-', '');
            const distributionLabel = `ExportRecipesDistribution${ branchSlug }`
            const distributionId = cdkOutputs[stackLabel][distributionLabel];

            console.log('cdkOutputs:', cdkOutputs);
            console.log('branch:', branch);
            console.log('branchLabel:', branchLabel);
            console.log('stackLabel:', stackLabel);
            console.log('branchSlug:', branchSlug);
            console.log('distributionLabel:', distributionLabel);
            console.log('distributionId', distributionId);

            return distributionId;
      - name: Get Bucket Name
        id: bucket-name
        uses: actions/github-script@v6
        env:
          S3_BUCKET_BASE: ${{ vars.S3_BUCKET_BASE }}
        with:
          result-encoding: string
          script: |
            const { S3_BUCKET_BASE } = process.env

            console.log('S3_BUCKET_BASE:', S3_BUCKET_BASE);

            const { ref } = context;
            const refArray = ref.split('/');
            const branch = refArray[refArray.length - 1];

            console.log('branch:', branch);

            const bucketName = `${ S3_BUCKET_BASE }-${ branch === 'main' ? 'prod' : 'dev' }`

            console.log('bucketName:', bucketName);

            return bucketName;
      - name: Set Deployment Environment Variables
        id: set-deploy-env
        env:
          S3_BUCKET: ${{ steps.bucket-name.outputs.result }}
          DISTRIBUTION_ID: ${{ steps.distribution-id.outputs.result }}
        run: |
          echo "S3_BUCKET: $S3_BUCKET"
          echo "DISTRIBUTION_ID: $DISTRIBUTION_ID"

          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
  deploySite:
    name: Deploy Site
    runs-on: ubuntu-latest
    needs: deployStack
    steps:
      - name: Deploy Site Content
        id: deploy-site-content
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          DISTRIBUTION_ID: ${{ vars.DISTRIBUTION_ID }}
          BRANCH: ${{ github.event.ref }}
        run: |
          echo "deployment bucket: $S3_BUCKET"
          echo "distributionId: $DISTRIBUTION_ID"

          echo "github context: ${{ github }}"
          echo "env context: ${{ env }}"
          echo "runner context: ${{ runner }}"

          aws s3 sync out/ $S3_BUCKET/branches/$BRANCH --delete
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' --no-cli-pager
