name: Build and Deploy
run-name: Build and Deploy

on:
  workflow_dispatch:
  # Allows external webhook trigger with "event_type" = "publish-event"
  repository_dispatch:
    types: [publish-event]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION_FILE: '.nvmrc'

jobs:
  BuildAndDeploySite:
    name: Build and Deploy Site
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NEXT_PUBLIC_API_ENDPOINT: https://graphql.contentful.com/content/v1/spaces/${{secrets.CONTENTFUL_SPACE_ID}}/
      NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
      NEXT_PUBLIC_CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
      S3_BUCKET_BASE: ${{ vars.S3_BUCKET_BASE }}
    steps:
      - name: Checkout Repo
        id: checkout-repo
        uses: actions/checkout@v3

      - name: Setup Node
        id: setup-node
        uses: './.github/actions/setup-node'

      - name: Setup Next
        id: setup-next
        uses: './.github/actions/next-build-cache'

      - name: Install Dependencies
        id: install-dependencies
        uses: './.github/actions/install-dependencies'

      # Bucket name should be looked up from shared resources outputs

      - name: Get Bucket Name
        id: bucket-name
        uses: './.github/actions/bucket-name'
        with:
          bucketBase: ${{ vars.S3_BUCKET_BASE }}

      - name: Get Distribution ID
        id: distribution-id
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const CloudFormation = require('aws-sdk/clients/cloudformation');
            const apiVersion = '2010-05-15';
            const region = 'us-east-1';
            const cloudFormation = new CloudFormation({ apiVersion, region });

            const refArray = context.ref.split('/');
            console.log('refArray:', refArray);

            const branch = refArray[refArray.length - 1];
            console.log('branch:', branch);

            let stackLabel;

            if (branch === 'main') {
              stackLabel = 'Prod';
            } else {
              stackLabel = branch[0].toUpperCase() + branch.slice(1);
            }

            console.log('stackLabel:', stackLabel);

            const stackName = `RecipesBranchStack${ stackLabel }`
            console.log('stackName:', stackName);

            let branchLabel;

            if (branch === 'main') {
              branchLabel = 'Main';
            } else {
              branchLabel = stackLabel.replaceAll('-', '');
            }

            console.log('branchLabel:', branchLabel);

            const distributionLabel = `ExportRecipesDistribution${ branchLabel }`
            console.log('distributionLabel:', distributionLabel);

            const result = await cloudFormation.describeStacks({ StackName: stackName }).promise();
            const foundStacks = (result && result.Stacks) || [];
            const stack = foundStacks.find(s => s.StackName === stackName);

            if (!stack) throw new Error(`Unable to find stack "${stackName}" in region "${region}"`);

            const distributionId = stack.Outputs.find(({ OutputKey }) => OutputKey === distributionLabel).OutputValue;
            console.log('distributionId:', distributionId);

            return distributionId;

      - name: Build and Deploy Client
        id: build-and-deploy-client
        env:
          BRANCH: ${{ github.ref_name }}
          DISTRIBUTION_ID: ${{ steps.distribution-id.outputs.result }}
          S3_BUCKET: ${{ steps.bucket-name.outputs.bucketName }}
        run: |
          echo "branch: $BRANCH"
          echo "deployment bucket: $S3_BUCKET"

          npm run deploy -w client
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' --no-cli-pager
